/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.ifto.aula9.jogodavelha.view.componentes;

import br.edu.ifto.aula9.jogodavelha.beans.Jogador;
import br.edu.ifto.aula9.jogodavelha.dao.control.JogadorControl;
import java.awt.Dimension;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Giovane
 */
public class MesaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MesaJPanel
     */
    public MesaJPanel(Jogador jogadorLocal, int idMesa) {
        initComponents();
        this.idMesa = idMesa;
        this.jogadorLocal = jogadorLocal;
        this.botaoJogador1.setMinimumSize(new Dimension(69, 28));
        this.botaoJogador2.setMinimumSize(new Dimension(69, 28));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        status = new javax.swing.JLabel();
        botaoJogador1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        botaoJogador2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 0));

        status.setForeground(new java.awt.Color(255, 255, 255));
        status.setText("Livre.");

        botaoJogador1.setText("            ");
        botaoJogador1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoJogador1(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("X");

        botaoJogador2.setText("            ");
        botaoJogador2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoJogador2(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botaoJogador1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botaoJogador2))
                    .addComponent(status))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoJogador1)
                    .addComponent(botaoJogador2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botaoJogador1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoJogador1

        try {

            //se a mesa clicada é igual a mesa ja selecionada
            if (this.jogadorLocal.getIdMesaSelecionada() == this.idMesa) {
                //cancela a seleção da mesa...
                jogadorLocal.setMesaSelecionada(false);
                //cancela a seleção da mesa na tabela específica no banco
                (new JogadorControl()).cancelaMesaJogador2(jogadorLocal);
                (new JogadorControl()).cancelaMesaJogador1(jogadorLocal);
                //Altera a mesa
                this.status.setText("Livre...");
                this.botaoJogador1.setText("");
                this.botaoJogador2.setText("");
                this.botaoJogador2.setMinimumSize(new Dimension(69, 28));
                this.jogadorLocal.setMesaSelecionada(false);
                this.jogadorLocal.setIdMesaSelecionada(-1);
            } else {
                //faz o processo de selação de mesa normal
                //se não selecionou nenhuma mesa...
                if (!jogadorLocal.isMesaSelecionada()) {
                    ///////////////////////////////////////ta errado aqui tem que trazer os dados da mesa e encapsular em um objeto
                    if (new JogadorControl().selecionarMesaJogador1(jogadorLocal, idMesa)) {
                        //Se o sistema consiguiu alocar a mesa parao jogador...
                        //inicia a thread de configuração da mesa...
                        //  Thread t = new ConfiguraMesa();
                        //  t.start();
                        this.status.setText("Aguardando desafiante...");
                        this.botaoJogador1.setText(jogadorLocal.getLogin());
                        this.botaoJogador1.setMinimumSize(new Dimension(69, 28));
                        this.jogadorLocal.setMesaSelecionada(true);
                        this.jogadorLocal.setIdMesaSelecionada(idMesa);
                    } else {
                        //emite mensagem de aviso...
                        JOptionPane.showMessageDialog(this, "Não é possível selecionar esta mesa.");
                    }
                } else {
                    //emite mensagem de aviso...
                    JOptionPane.showMessageDialog(this, "Você já possui uma mesa selecionada!", "Aviso.", 2);
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(MesaJPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Ocorreu uma falha no sistema.", "Aviso.", 0);
        }

    }//GEN-LAST:event_botaoJogador1

    private void botaoJogador2(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoJogador2
        try {

            //se a mesa clicada é igual a mesa ja selecionada
            if (this.jogadorLocal.getIdMesaSelecionada() == this.idMesa) {
                //cancela a seleção da mesa...
                jogadorLocal.setMesaSelecionada(false);
                //cancela a seleção da mesa na tabela específica no banco
                (new JogadorControl()).cancelaMesaJogador2(jogadorLocal);
                (new JogadorControl()).cancelaMesaJogador1(jogadorLocal);
                //Altera a mesa
                this.status.setText("Livre...");
                this.botaoJogador1.setText("");
                this.botaoJogador2.setText("");
                this.botaoJogador2.setMinimumSize(new Dimension(69, 28));
                this.jogadorLocal.setMesaSelecionada(false);
                this.jogadorLocal.setIdMesaSelecionada(-1);
            } else {
                //faz o processo de selação de mesa normal
                //se não selecionou nenhuma mesa...
                if (!jogadorLocal.isMesaSelecionada()) {
                    ///////////////////////////////////////ta errado aqui tem que trazer os dados da mesa e encapsular em um objeto
                    if (new JogadorControl().selecionarMesaJogador2(jogadorLocal, idMesa)) {
                        //Se o sistema consiguiu alocar a mesa parao jogador...
                        //inicia a thread de configuração da mesa...
                        //  Thread t = new ConfiguraMesa();
                        //  t.start();
                        this.status.setText("Aguardando desafiante...");
                        this.botaoJogador2.setText(jogadorLocal.getLogin());
                        this.botaoJogador2.setMinimumSize(new Dimension(69, 28));
                        this.jogadorLocal.setMesaSelecionada(true);
                        this.jogadorLocal.setIdMesaSelecionada(idMesa);
                    } else {
                        //emite mensagem de aviso...
                        JOptionPane.showMessageDialog(this, "Não é possível selecionar esta mesa.");
                    }
                } else {
                    //emite mensagem de aviso...
                    JOptionPane.showMessageDialog(this, "Você já possui uma mesa selecionada!", "Aviso.", 2);
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(MesaJPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Ocorreu uma falha no sistema.", "Aviso.", 0);
        }
    }//GEN-LAST:event_botaoJogador2

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoJogador1;
    private javax.swing.JButton botaoJogador2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
    private int idMesa;
    private Jogador jogadorLocal;
//    private Mesa mesa;
}
